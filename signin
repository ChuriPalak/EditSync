 import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        // âš¡ Replace with real DB check
        if (
          credentials?.email === "test@editsync.com" &&
          credentials?.password === "1234"
        ) {
          return {
            id: "1",
            name: "Test User",
            email: credentials.email,
          };
        }
        return null;
      },
    }),
  ],
  pages: {
    signIn: "/login", // your login.tsx UI
  },
  session: {
    strategy: "jwt",
  },
  secret: process.env.NEXTAUTH_SECRET,
});

export { handler as GET, handler as POST };
// app/api/ai/route.ts
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const formData = await req.formData();
  const text = formData.get("text") as string;
  const operation = formData.get("operation") as string;

  // Simulate AI processing
  const result = `Operation: ${operation}\n\nProcessed text:\n${text}`;

  // Return JSON + downloadable file URL
  return NextResponse.json({
    result,
    file: `data:text/plain;charset=utf-8,${encodeURIComponent(result)}`,
  });
}

import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const formData = await req.formData();
  const text = formData.get("text") as string;
  const operation = formData.get("operation") as string;

  // Simulate AI processing
  const result = `Operation: ${operation}\n\nProcessed text:\n${text}`;

  return NextResponse.json({
    result,
    file: `data:text/plain;charset=utf-8,${encodeURIComponent(result)}`,
  });
}
